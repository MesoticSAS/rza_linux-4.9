/*
 * Device Tree Source for the YLCDRZA1H board
 *
 * Copyright (C) 2017 Renesas Electronics
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 *  a) This file is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 2 of the
 *     License, or (at your option) any later version.
 *
 *     This file is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 * Or, alternatively,
 *
 *  b) Permission is hereby granted, free of charge, to any person
 *     obtaining a copy of this software and associated documentation
 *     files (the "Software"), to deal in the Software without
 *     restriction, including without limitation the rights to use,
 *     copy, modify, merge, publish, distribute, sublicense, and/or
 *     sell copies of the Software, and to permit persons to whom the
 *     Software is furnished to do so, subject to the following
 *     conditions:
 *
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *     OTHER DEALINGS IN THE SOFTWARE.
 */


/dts-v1/;
#include "r7s72100.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/pinctrl/r7s72100-pinctrl.h>

/ {
	model = "YLCDRZA1H";
	compatible = "renesas,ylcdrza1h", "renesas,r7s72100";

	aliases {
		/* It is recommended to always map the serial console as /dev/ttySC0
		 * in you system regardless of the actual SCIF channel used */
		serial0 = &scif3;
	};

	chosen {
		/* Keep extra spaces at the end in case you want to add additional command line options from u-boot */
		bootargs = "ignore_loglevel earlyprintk earlycon=scif,0xE8008000 rootfstype=axfs root=/dev/null rootflags=physaddr=0x18800000     ";
		stdout-path = "serial0:115200n8";
	};

	memory@08000000 {
		device_type = "memory";
		reg = <0x08000000 0x02000000>;	 /* 32Mbyte of External SDRAM on CS2 */
	};

	lbsc {
		#address-cells = <1>;
		#size-cells = <1>;
	};

	leds {
		status = "okay";
		compatible = "gpio-leds";

		led_red {
			gpios = <&port3 8 GPIO_ACTIVE_HIGH>;
		};

		led_grn {
			gpios = <&port3 9 GPIO_ACTIVE_HIGH>;
		};
	};

#if 0
	/* File System in XIP QSPI */
	/* Remember, we'll be in QSPI XIP mode at this point */
	/* Requires CONFIG_MTD_ROM=y */
	qspi@18000000 {
		compatible = "mtd-rom";
		probe-type = "map_rom";
		reg = <0x18000000 0x4000000>;	/* 64 MB*/
		bank-width = <4>;
		device-width = <1>;

		#address-cells = <1>;
		#size-cells = <1>;

		partition@800000 {
			label ="user";
			reg = <0x0800000 0x800000>; /* 8MB @ 0x18800000 */
			read-only;
		};
	};
#endif
};

/* EXTAL (remove if not populated) */
&extal_clk {
	clock-frequency = <13330000>;	/* 13.33MHz */
};

/* USB_X1 (remove if not populated) */
&usb_x1_clk {
	clock-frequency = <48000000>;	/* 48MHz */
};

/* RTC_X1 (remove if not populated) */
&rtc_x1_clk {
	clock-frequency = <32768>;
};

/* Define your pin settings here
 *
 * Please refer to tables 54.xx in the Hardware Manual for the correct
 * 'Alternative Mode' number for each pin. Caution: Alt Mode numbers
 * vary per pin and per device tyep (RZ/A1L,A1M,A1H)
 *
 * Syntax:
 *    pinmux = <RZA1_PINMUX(Port, Pin, Alt Mode)>
 *
 * Example:
 *    pinmux = <RZA1_PINMUX(3, 0, 6)>   /* P3_0 = TxD2 */
/*
 */
&pinctrl {

	/* Serial Console */
	scif3_pins: serial3 {
		pinmux = <RZA1_PINMUX(8, 8, 7)>,	/* TxD3 */
			 <RZA1_PINMUX(8, 9, 7)>;	/* TxD3 */
	};

	/* Ethernet Pins */
	ether_pins: ether {
		pinmux = <RZA1_PINMUX(1, 14, 4)>,	/* ET_COL   */
			 <RZA1_PINMUX(5, 9, 2)>,	/* ET_MDC   */
			 <RZA1_PINMUX(3, 3, 2)>,	/* ET_MDIO  */
			 <RZA1_PINMUX(3, 4, 2)>,	/* ET_RXCLK */
			 <RZA1_PINMUX(3, 5, 2)>,	/* ET_RXER  */
			 <RZA1_PINMUX(3, 6, 2)>,	/* ET_RXDV  */
			 <RZA1_PINMUX(2, 0, 2)>,	/* ET_TXCLK */
			 <RZA1_PINMUX(2, 1, 2)>,	/* ET_TXER  */
			 <RZA1_PINMUX(2, 2, 2)>,	/* ET_TXEN  */
			 <RZA1_PINMUX(2, 3, 2)>,	/* ET_CRS   */
			 <RZA1_PINMUX(2, 4, 2)>,	/* ET_TXD0  */
			 <RZA1_PINMUX(2, 5, 2)>,	/* ET_TXD1  */
			 <RZA1_PINMUX(2, 6, 2)>,	/* ET_TXD2  */
			 <RZA1_PINMUX(2, 7, 2)>,	/* ET_TXD3  */
			 <RZA1_PINMUX(2, 8, 2)>,	/* ET_RXD0  */
			 <RZA1_PINMUX(2, 9, 2)>,	/* ET_RXD1  */
			 <RZA1_PINMUX(2, 10, 2)>,	/* ET_RXD2  */
			 <RZA1_PINMUX(2, 11, 2)>;	/* ET_RXD3  */
	};

	/* SDHI ch0 Pins */
	sdhi0_pins: sdhi0 {
		pinmux = <RZA1_PINMUX(4, 8, 3)>,	/* SD_CD_0 */
			 <RZA1_PINMUX(4, 9, 3)>,	/* SD_WP_0 */
			 <RZA1_PINMUX(4, 10, 3)>,	/* SD_D1_0 */
			 <RZA1_PINMUX(4, 11, 3)>,	/* SD_D0_0 */
			 <RZA1_PINMUX(4, 12, 3)>,	/* SD_CLK_0 */
			 <RZA1_PINMUX(4, 13, 3)>,	/* SD_CMD_0 */
			 <RZA1_PINMUX(4, 14, 3)>,	/* SD_D3_0 */
			 <RZA1_PINMUX(4, 15, 3)>;	/* SD_D2_0 */
	};

	/* MMC Pins */
	mmc_pins: mmc {
		pinmux = <RZA1_PINMUX(3, 8, 8)>,	/* MMC_CD */
			 <RZA1_PINMUX(3, 10, 8)>,	/* MMC_D1 */
			 <RZA1_PINMUX(3, 11, 8)>,	/* MMC_D0 */
			 <RZA1_PINMUX(3, 12, 8)>,	/* MMC_CLK */
			 <RZA1_PINMUX(3, 13, 8)>,	/* MMC_CMD */
			 <RZA1_PINMUX(3, 14, 8)>,	/* MMC_D3 */
			 <RZA1_PINMUX(3, 15, 8)>,	/* MMC_D2 */
			 <RZA1_PINMUX(11, 12, 4)>,	/* MMC_D4 */
			 <RZA1_PINMUX(11, 13, 4)>,	/* MMC_D5 */
			 <RZA1_PINMUX(11, 14, 4)>,	/* MMC_D6 */
			 <RZA1_PINMUX(11, 15, 4)>;	/* MMC_D7 */
	};


	/* RIIC ch1 Pins */
	i2c1_pins: i2c1 {
		pinmux = <RZA1_PINMUX(1, 2, 1)>,	/* RIIC1SCL */
			 <RZA1_PINMUX(1, 3, 1)>,	/* RIIC1SDA */
			 <RZA1_PINMUX(1, 10, 3)>;	/* IRQ4 (for touchscreen) */
			 /* P8_13 is GPIO for pixcir reset */
	};

	/* VDC5 LCD ch 0 Pins */
	vdc50_pins: vdc50 {
		pinmux =
			/* LCD0_DATA0 to LCD0_DATA7 */
			<RZA1_PINMUX(11, 7, 5)>,/* LCD0_DATA0 */
			<RZA1_PINMUX(11, 6, 5)>,/* LCD0_DATA1 */
			<RZA1_PINMUX(11, 5, 5)>,/* LCD0_DATA2 */
			<RZA1_PINMUX(11, 4, 5)>,/* LCD0_DATA3 */
			<RZA1_PINMUX(11, 3, 5)>,/* LCD0_DATA4 */
			<RZA1_PINMUX(11, 2, 5)>,/* LCD0_DATA5 */
			<RZA1_PINMUX(11, 1, 5)>,/* LCD0_DATA6 */
			<RZA1_PINMUX(11, 0, 5)>,/* LCD0_DATA7 */

			/* LCD0_DATA8 to LCD0_DATA15 */
			<RZA1_PINMUX(4, 0, 1)>,	/* LCD0_DATA8 */
			<RZA1_PINMUX(4, 1, 1)>,	/* LCD0_DATA9 */
			<RZA1_PINMUX(4, 2, 1)>,	/* LCD0_DATA10 */
			<RZA1_PINMUX(4, 3, 1)>,	/* LCD0_DATA11 */
			<RZA1_PINMUX(4, 4, 1)>,	/* LCD0_DATA12 */
			<RZA1_PINMUX(4, 5, 1)>,	/* LCD0_DATA13 */
			<RZA1_PINMUX(4, 6, 1)>,	/* LCD0_DATA14 */
			<RZA1_PINMUX(4, 7, 1)>,	/* LCD0_DATA15 */

			/* LCD0_DATA16 to LCD0_DATA23 */
			<RZA1_PINMUX(5, 0, 3)>,	/* LCD0_DATA16 */
			<RZA1_PINMUX(5, 1, 3)>,	/* LCD0_DATA17 */
			<RZA1_PINMUX(5, 2, 3)>,	/* LCD0_DATA18 */
			<RZA1_PINMUX(5, 3, 3)>,	/* LCD0_DATA19 */
			<RZA1_PINMUX(5, 4, 3)>,	/* LCD0_DATA20 */
			<RZA1_PINMUX(5, 5, 3)>,	/* LCD0_DATA21 */
			<RZA1_PINMUX(5, 6, 3)>,	/* LCD0_DATA22 */
			<RZA1_PINMUX(5, 7, 3)>,	/* LCD0_DATA23 */

			/* TCON pins (some may not be used) */
			//<RZA1_PINMUX(11, 14, 5)>,	/* LCD0_TCON0 */
			//<RZA1_PINMUX(11, 13, 5)>,	/* LCD0_TCON1 */
			//<RZA1_PINMUX(11, 12, 5)>,	/* LCD0_TCON2 */
			//<RZA1_PINMUX(11, 11, 5)>,	/* LCD0_TCON3 */
			<RZA1_PINMUX(11, 10, 5)>,	/* LCD0_TCON4 */
			<RZA1_PINMUX(11, 9,  5)>,	/* LCD0_TCON5 */
			<RZA1_PINMUX(11, 8,  5)>,	/* LCD0_TCON6 */

			<RZA1_PINMUX(3, 0, 1)>;	/* LCD0_CLK */
	};

};

/* High resolution System tick timers */
&ostm0 {
	status = "okay";
};

&ostm1 {
	status = "okay";
};

/* The MTU2 system timer is not really needed if you are using the higher
 * resolution OSTM timer */
# if 0
&mtu2 {
	status = "okay";
};
#endif

/* Real Time Clock */
&rtc {
	status = "okay";
};

/* Serial Console */
&scif3 {
	pinctrl-names = "default";
	pinctrl-0 = <&scif3_pins>;
	status = "okay";
};

/* Ethernet */
&ether {
	pinctrl-names = "default";
	pinctrl-0 = <&ether_pins>;
	status = "okay";
	renesas,no-ether-link;
	phy-handle = <&phy0>;
	phy0: ethernet-phy@0 {
		reg = <0>;
	};
};

/* SDHI ch0 */
&sdhi0 {
	pinctrl-names = "default";
	pinctrl-0 = <&sdhi0_pins>;
	bus-width = <4>;
	status = "okay";
};

/* MMC */
/*
 * MMC devices requires a 3.3 volt regulator node.
 * Add a 3.3v "regulator-fixed" node at the root
 */
/ {
	d3_3v: regulator-d3-3v {
		compatible = "regulator-fixed";
		regulator-name = "D3.3V";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
		regulator-always-on;
	};
};
&mmcif {
	pinctrl-names = "default";
	pinctrl-0 = <&mmc_pins>;
	vmmc-supply = <&d3_3v>;
	vqmmc-supply = <&d3_3v>;
	bus-width = <8>;
	non-removable;
	status = "okay";
};

/* USB Host ch0 */
&usbhost0 {
	status = "okay";
	xtal-48mhz;
};

/* RIIC1 (Touchscreen) */
&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	status = "okay";
	clock-frequency = <400000>;

	/* PIXCIR Capacitive Touch Sensor Controller */
	pixcir_ts@5c {
		compatible = "pixcir,pixcir_tangoc";
		reg = <0x5c>; /* I2C address = 0x5c */
		interrupts = <GIC_SPI (36-32) IRQ_TYPE_EDGE_FALLING>; /* IRQ4 */

		attb-gpio = <&port7 1 GPIO_ACTIVE_LOW>;	/* dummy, because attb pin is not hooked up */
		//reset-gpios = <&port7 1 GPIO_ACTIVE_LOW>;

		touchscreen-size-x = <1280>;
		touchscreen-size-y = <800>;
	};
};

/* LCD */
#ifdef XIP_KERNEL_WITHOUT_EXTERNAL_RAM
  #define VDC5_BPP 16 /* 16bpp or 32bpp */
  #define VDC5_FBSIZE (1280*800*VDC5_BPP/8)
  #define VDC5_FB_ADDR 0	/* 0 = allocate memory at probe (don't use when using SDRAM) */
#else
 #define VDC5_BPP 32 /* 16bpp or 32bpp */
 #define VDC5_FBSIZE (1280*800*VDC5_BPP/8)
  /* Assume we are using external SDRAM for system memory so we have all
     the internal memory just for our LCD frame buffer */
  /* Fixed allocation */
  #define VDC5_FB_ADDR (0x60000000) /* fixed address in PAGE 0 (2MB) */
#endif

&vdc50 {
	pinctrl-names = "default";
	pinctrl-0 = <&vdc50_pins>;

	display = <&display0>;
	status = "okay";

	/* Set the physical frame buffer address for internal RAM. */
	fb_phys_addr = <VDC5_FB_ADDR>;
	fb_phys_size = <VDC5_FBSIZE>;

	panel_name = "HSD070PWW1";
	panel_pixel_xres = <1280>;	/* panel native resolution */
	panel_pixel_yres = <800>;	/* panel native resolution */


	/* See 'drivers/video/fbdev/renesas/vdc5fb.h' for valid choices
	* for panel_icksel, panel_ocksel, and out_format */
	panel_icksel = <3>;	/* 3=ICKSEL_P1CLK (Peripheral clock 1) */
	panel_ocksel = <0>;	/* (don't care when lvds=0 ) */
	out_format = <0>;	/* 0=OUT_FORMAT_RGB888 */
	use_lvds = <0>;		/* Set to 0 or 1 */

	/* Define how the TCON pins going to be used */
	/* From file [ drivers/video/fbdev/renesas/vdc5fb.h ]
	 * 0 = STVA/VS (VSYNC)
	 * 1 = STVB/VE (Vertical Enable)
	 * 2 = STH/SP/HS (HSYNC)
	 * 3 = STB/LP/HE (Horizontal Enable)
	 * 4 = CPV/GCK (Gate clock signal)
	 * 5 = POLA (VCOM voltage polarity control signal)
	 * 6 = POLB (VCOM voltage polarity control signal)
	 * 7 = DE (Data Enable)
	 * 0xff = pin not used */
	tcon_sel = <
		0xff	/* TCON0: */
		0xff	/* TCON1: */
		0xff	/* TCON2: */
		0xff	/* TCON3: */
		2	/* TCON4: HSYNC */
		0	/* TCON5: VSYNC */
		7	/* TCON6: DATA ENABLE*/
		>;

	display0: display0 {
		bits-per-pixel = <VDC5_BPP>;
		bus-width = <24>;

		display-timings {
			native-mode = <&timing0>;
			timing0: timing0 {
				clock-frequency = <33325000>; /* P1 clk / 2 */
				/*clock-frequency = <71100000>;*/ /* min:64.3MHz, typ:71.1MHz, max:82MHz */
				hactive = <1280>;
				vactive = <800>;
				hback-porch = <16>;
				hfront-porch = <16>;
				vback-porch = <24>;
				vfront-porch = <1>;
				hsync-len = <160>; /* max */
				vsync-len = <23>; /* max */
				hsync-active = <1>; /* HIGH */
				vsync-active = <1>; /* HIGH */
				de-active = <0>; /* LOW */
				pixelclk-active = <0>; /* ??? */
			};
		};
	};
}; /* LCD end */

